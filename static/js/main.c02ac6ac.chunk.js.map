{"version":3,"sources":["Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","disabled","className","onClick","titleButton","App","useState","count","setCount","disabledInc","setDisabledInc","disabledReset","setDisabledReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAMQ,SAASA,EAAOC,GAGrB,OAEH,wBAAQC,SAAUD,EAAMC,SAAUC,UAAU,SAASC,QAASH,EAAMG,QAApE,SACKH,EAAMI,cC2BIC,MAnCf,WAAgB,IAAD,EAEWC,mBAAS,GAFpB,mBAERC,EAFQ,KAEDC,EAFC,OAIyBF,oBAAS,GAJlC,mBAING,EAJM,KAIOC,EAJP,OAK6BJ,oBAAS,GALtC,mBAKNK,EALM,KAKSC,EALT,KAsBd,OAEA,sBAAKV,UAAU,UAAf,UACE,qBAAKA,UAAoB,IAATK,EAAa,iBAAmB,gBAAhD,SAAkEA,IAChE,cAACR,EAAD,CAAQE,SAAUQ,EAAaN,QAnBxB,WACTK,IAAWD,GACI,IAAZA,GACFG,GAAe,GAEhBE,GAAiB,IAc8BR,YAAa,QAC1D,cAACL,EAAD,CAAQE,SAAUU,EAAeR,QAXxB,WACZK,EAAS,GACTI,GAAiB,GACjBF,GAAe,IAQqCN,YAAa,cCjBpDS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c02ac6ac.chunk.js","sourcesContent":[" type ButtonProps = {\r\n    onClick:() => void\r\n    titleButton: string\r\n    disabled: boolean\r\n}\r\n\r\n export function Button(props: ButtonProps){\r\n\r\n\r\n   return (\r\n         \r\n<button disabled={props.disabled} className=\"button\" onClick={props.onClick}>\r\n    {props.titleButton}\r\n  </button>\r\n   )\r\n}\r\n\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {Button} from \"./Button\";\n\nfunction App() {\n\n  let [count, setCount] = useState(0);\n\n  const [disabledInc, setDisabledInc] = useState(false);\n  const [disabledReset, setDisabledReset] = useState(true);\n\nconst inc = () => {\n   setCount(++count)\n  if (count   === 5 ) {\n    setDisabledInc(true)\n   }\n   setDisabledReset(false)\n  \n}\n\nconst reset = () => {\n  setCount(0)\n  setDisabledReset(true)\n  setDisabledInc(false)\n}\n\n return (\n     \n <div className=\"wrapper\">\n   <div className={count ===5 ? \"wrapper-count1\" : \"wrapper-count\"}>{count}</div>\n     <Button disabled={disabledInc} onClick={inc} titleButton={'inc'}/>\n     <Button disabled={disabledReset} onClick={reset} titleButton={'reset'}/>\n</div> \n   \n       \n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}